@page "/addconsultant"
@attribute [Authorize(Roles = "Admin, Manager")]
@inject INouveauConsultantViewModel viewModel

@using Hermes.ValidationModels

<EditForm EditContext="@viewModel.EditContextValidation">
    <DataAnnotationsValidator />
        <MudGrid>
		    <!-- Première ligne -->
            <MudItem xs="6">
                <MudTextField @bind-Value="viewModel.ValidationForm.Nom"
                              For="@(() => viewModel.ValidationForm.Nom)"
                              Label="Nom"
    							Disabled="@viewModel.IsLoading"
                              HelperText="Nom"
                              Variant="Variant.Outlined"></MudTextField>
    
                <MudTextField @bind-Value="viewModel.ValidationForm.Prenom"
                              For="@(() => viewModel.ValidationForm.Prenom)"
                              Label="Prénom"
                          Disabled="@viewModel.IsLoading"
                              HelperText="Prénom"
                              Variant="Variant.Outlined"></MudTextField>

                <InputFile id="miniCv"
                       OnChange="viewModel.UploadMiniCv"
                       hidden
                       accept=".pdf" />

                <MudTooltip Text="Ajout du dossier de compétence">
                    <MudIconButton HtmlTag="label"
                                   Color="Color.Primary"
                                    Size="Size.Large"
                                   Icon="@Icons.Filled.AttachFile"
                                    for="miniCv" />
								
                @if (!string.IsNullOrEmpty(viewModel.FileName))
				{
                    @viewModel.FileName
                }
                </MudTooltip>
                
            </MudItem>

            <MudItem xs="1">
                
                <InputFile id="photoInput"
                           OnChange="viewModel.UploadPhoto"
                           hidden
                           accept=".jpg, .jpeg, .png" />

                <MudTooltip Text="Ajouter une photo">
                    <MudIconButton HtmlTag="label"
                                   Color="Color.Primary"
                                    Size="Size.Large"
                                   Icon="@Icons.Filled.PhotoCamera"
                                   for="photoInput" />
                </MudTooltip>

                
            </MudItem>
        
            <MudItem xs="5">
                @if (!string.IsNullOrEmpty(viewModel.UrlPhoto))
                {
                    <div>
                        <MudImage Src="@viewModel.UrlPhoto" Class="rounded-lg" ObjectFit="ObjectFit.Contain" Height="250"></MudImage>
                    </div>
                }
            </MudItem>


		<!-- Deuxième ligne -->
		<MudItem xs="6">
			 <MudAutocomplete T="string"
                            Label="Technologies"
                             Disabled="@viewModel.IsLoading"
                             AdornmentIcon="@Icons.Material.Filled.Search"
                             SearchFunc="@viewModel.SearchTechno"
                             ValueChanged="@viewModel.OnSelectTechno" />
        </MudItem>

	    <MudItem xs="6">
			 <MudAutocomplete T="string"
                            Label="Compétences"
                             Disabled="@viewModel.IsLoading"
                             AdornmentIcon="@Icons.Material.Filled.Search"
                             SearchFunc="@viewModel.SearchCompetence"
                             ValueChanged="@viewModel.OnSelectCompetence" />
        </MudItem>

		
        <MudItem xs="6">
            <div><u>Liste des technos maîtrisées</u> :</div>
            @foreach (var tech in viewModel.TechnoSelected)
            {
                <MudChip Color="Color.Success" 
                        OnClose="@(() => viewModel.DeleteTech(tech.Id))"
                        CloseIcon="@Icons.Material.Filled.Close">@tech.NomTech</MudChip>
            }
        </MudItem>

        <MudItem xs="6">
            <div><u>Liste des compétences</u> :</div>
            @foreach (var comp in viewModel.CompetencesSelected)
            {
                <MudChip Color="Color.Secondary"
                     OnClose="@(() => viewModel.DeleteCompetence(comp.Id))"
                     CloseIcon="@Icons.Material.Filled.Close">@comp.Nom</MudChip>
            }
        </MudItem>



            <MudItem xs="12">
                <MudButton Variant="Variant.Filled" 
                            Color="Color.Primary"
                            Disabled="@viewModel.IsLoading"
                            ButtonType="ButtonType.Submit" 
                            OnClick="@viewModel.Add">Ajouter</MudButton>
                <MudButton Variant="Variant.Filled" 
                            Color="Color.Secondary" 
                            OnClick="@viewModel.Cancel">Annuler</MudButton>
            </MudItem>
        </MudGrid>
</EditForm>

@code {

    protected async override void OnInitialized()
    {
        viewModel.SetStateHasChanged(StateHasChanged);
        await viewModel.LoadDatas();
    }
}